# opcodes

# stack management
# pushi     -- 0x10 operand
# pushf     -- 0x11 operand
# pop       -- 0x12 
# pushsp    -- 0x13 operand
# pushb     -- 0x14 operand
# pushc     -- 0x15 operand

# memory management
# decli     -- 0x20 operand
# declf     -- 0x21 operand
# loadi     -- 0x22 operand
# loadf     -- 0x23 operand
# stori     -- 0x24 operand
# storf     -- 0x25 operand
# dstri     -- 0x26 operand
# dstrf     -- 0x27 operand
# declb     -- 0x28 operand
# loadb     -- 0x29 operand
# storb     -- 0x2A operand
# dstrb     -- 0x2B operand
# declc     -- 0x2C operand
# loadc     -- 0x2D operand
# storc     -- 0x2E operand
# dstrc     -- 0x2F operand

# arithmetic
# addi      -- 0x30
# addf      -- 0x31
# subi      -- 0x32
# subf      -- 0x33
# muli      -- 0x34
# mulf      -- 0x35
# divi      -- 0x36
# divf      -- 0x37
# addc      -- 0x38
# subc      -- 0x39

# control flow
# ifTrue    -- 0x50 operand
# ifFalse   -- 0x51 operand
# eqi       -- 0x52
# neqi      -- 0x53
# lessi     -- 0x54
# leqi      -- 0x55
# grti      -- 0x56
# geqi      -- 0x57
# and       -- 0x58
# or        -- 0x59
# jump      -- 0x5A
# retval    -- 0x5B
# eqf       -- 0x5C
# neqf      -- 0x5D
# lessf     -- 0x5E
# leqf      -- 0x5F
# grtf      -- 0x60
# geqf      -- 0x61
# eqb       -- 0x62
# neqb      -- 0x63
# ret       -- 0x64

# arrays
# decla     -- 0x80 addr    type_len    len
# loada     -- 0x81 addr
# loadai    -- 0x82 addr
# loadaf    -- 0x83 addr
# loadab    -- 0x84 addr
# loadac    -- 0x85 addr
# stora     -- 0x86 addr
# storai    -- 0x87 addr
# storaf    -- 0x88 addr
# storab    -- 0x89 addr
# storac    -- 0x8A addr
# dstra     -- 0x8B addr

# io
# prnti     -- 0x90
# prntf     -- 0x91
# prntb     -- 0x92
# prntc     -- 0x93
# input     -- 0x94

# var a = b;
#
# declare a
# push b
# store a

# a + b - c
#
# push a
# push b
# add
# push c
# sub

# var a = b + c * d;
#
# declare a
# push c
# push d
# mul
# push b
# add
# store a

# if a == b {
#   if_block
# } else {
#   else_block
# }
#
# push a
# push b
# if_true after_if_block
# if_block bytes
# jmp after_else_block
# else_block bytes
# 

# while a < b {
#   while_block
# }
#
# cmp a, b
# jge after_while_block
# while_block bytes
# jmp begin
# 

# fn func(a: int, b: int) {
#   func_block
#   return z
# }
# 
# store a
# store b
# func_block bytes
# push z
# ret